@charset "UTF-8";
@import "compass";

/*!
    Custom Grid System 1.2.17 - http://custom.gs/

    Custom Grid System is a new Sass based grid system that combines best practices of:
     * 960 Grid System - http://960.gs/
     * Unsemantic - http://unsemantic.com/
     * Twitter Bootstrap - http://getbootstrap.com/
     * Semantic - http://semantic.gs/
    Licensed under GPL and MIT.
*/

/* CustomGS Setup Variables */

$base-resolution: 1250px; // Container max-width will get 100% from this resolution
$container-max-width: 1200px; // Container max width
$min-resolution: false; // false or px value
$number-of-columns: 24; // Grid columns amount
$fluid: true; // Fluid columns?
$gutter: 16px; // Gutter (space between columns)
$fixed-gutter: true; // Gutter will not change within fluid columns
$semantic: true; // Do not generate classes

/* Helper Variables - Do not touch this! */

$column-width: ($container-max-width / $number-of-columns) - $gutter;
$total-column-width: $gutter + $column-width;
$fixed-gutter: if($fluid, $fixed-gutter, false);

/* Functions - Do not touch this! */

@function responsive($target, $context, $measure: "%") {
  @if $fluid {
    $measure: if($measure=="%",100%,1em);
    @return ($target / $context) * 100%;
  } @else {
    @return $target;
  }
}

@function unresponsive($target, $context) {
  @if $fluid {
    @return "#{$target}/#{$context}";
  } @else {
    @return "";
  }
}

/* Containers
----------------------------------------------------------------------------------------------------*/

@mixin container {
  margin-left: auto;
  margin-right: auto;
  @if $fluid {
    max-width: $container-max-width;
    width: responsive($container-max-width, $base-resolution); /* #{unresponsive($container-max-width, $base-resolution)} */
  } @else {
    width: $container-max-width;
  }
}

@if $semantic == false {
  .container_#{$number-of-columns} {
    @include container;
  }
}

/* Grids
----------------------------------------------------------------------------------------------------*/

@mixin grids {
  display: inline;
  float: left;
  position: relative;
  @if $fixed-gutter {
    @include box-sizing(border-box);
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
  } @else {
    margin-left: responsive($gutter / 2, $container-max-width); /* #{unresponsive($gutter / 2, $container-max-width)} */
    margin-right: responsive($gutter / 2, $container-max-width); /* #{unresponsive($gutter / 2, $container-max-width)} */
  }
}

@if $semantic == false {
  @for $i from 1 through $number-of-columns {
    .grid_#{$i} {
      @include grids;
    }
  }
}

%pushes_pulls {
  position: relative;
}

@if $semantic == false {
  @for $i from 1 through $number-of-columns {
    .push_#{$i}, .pull_#{$i} {
      @extend %pushes_pulls;
    }
  }
}

/* Grid >> Children (Alpha ~ First, Omega ~ Last)
----------------------------------------------------------------------------------------------------*/

%alpha {
  margin-left: 0;
}

%omega {
  margin-right: 0;
}

/*@if $semantic == false {
  .alpha {
    @extend %alpha;
  }

  .omega {
    @extend %omega;
  }
}*/

/* Grid >> Nested
----------------------------------------------------------------------------------------------------*/

@mixin grid_parent {
  @if $fixed-gutter {
    padding-left: 0 !important;
    padding-right: 0 !important;
  } @else {
    >:first-child {
      @extend %alpha;
    }
    >:last-child {
      @extend %omega;
    }
  }
}

@if $semantic == false {
  .grid_parent {
    @include grid_parent;
  }
}

/* Grid >> #{$number-of-columns} columns
----------------------------------------------------------------------------------------------------*/

@if $semantic == false {
  @for $i from 1 through $number-of-columns {
    .container_#{$number-of-columns} .grid_#{$i} {
      @if $fixed-gutter {
        width: responsive($column-width+$gutter+($total-column-width*($i - 1)), $container-max-width); /* #{unresponsive($column-width+$gutter+($total-column-width*($i - 1)), $container-max-width)} */
      } @else {
        width: responsive($column-width+($total-column-width*($i - 1)), $container-max-width); /* #{unresponsive($column-width+($total-column-width*($i - 1)), $container-max-width)} */
      }
    }
  }
}

@mixin grid($columns, $context: $number-of-columns) {
  @include grids;
  $fluider: if($fluid, $number-of-columns / $context, 1);
  @if $fixed-gutter {
    width: responsive($total-column-width+($total-column-width*(($columns * $fluider) - 1)), $container-max-width); /* #{unresponsive($total-column-width+($total-column-width*(($columns * $fluider) - 1)), $container-max-width)} */
  } @else {
    @if $context == $number-of-columns {
      width: responsive($column-width+($total-column-width*(($columns * $fluider) - 1)), $container-max-width);
    } @else {
      width: responsive($column-width * $columns + ($gutter * ($columns - 1)), $context * $total-column-width - $gutter);
    }
    @if $fluid and $context != $number-of-columns {
      margin-left: responsive($gutter / 2, $total-column-width * $context - $gutter); /* #{unresponsive($gutter / 2, $total-column-width * $context - $gutter)} */
      margin-right: responsive($gutter / 2, $total-column-width * $context - $gutter); /* #{unresponsive($gutter / 2, $total-column-width * $context - $gutter)} */
    }
  }
}

/* Prefix Extra Space >> #{$number-of-columns} columns
----------------------------------------------------------------------------------------------------*/

@mixin prefix($left, $context: $number-of-columns) {
  @if $fixed-gutter {
    margin-left: responsive($column-width+($total-column-width*($left - 1))+$gutter, $container-max-width); /* #{unresponsive($column-width+($total-column-width*($left - 1))+$gutter, $container-max-width)} */
  } @else {
    padding-left: responsive($column-width+($total-column-width*($left - 1))+$gutter, $container-max-width); /* #{unresponsive($column-width+($total-column-width*($left - 1))+$gutter, $container-max-width)} */
  }
}

@if $semantic == false {
  @for $i from 1 through 24 {
    .container_#{$number-of-columns} .prefix_#{$i} {
      @include prefix($i);
    }
  }
}

/* Suffix Extra Space >> #{$number-of-columns} columns
----------------------------------------------------------------------------------------------------*/

@mixin suffix($right, $context: $number-of-columns) {
  @if $fixed-gutter {
    margin-right: responsive($column-width+($total-column-width*($right - 1))+$gutter, $container-max-width); /* #{unresponsive($column-width+($total-column-width*($right - 1))+$gutter, $container-max-width)} */
  } @else {
    padding-right: responsive($column-width+($total-column-width*($right - 1))+$gutter, $container-max-width); /* #{unresponsive($column-width+($total-column-width*($right - 1))+$gutter, $container-max-width)} */
  }
}

@for $i from 1 through $number-of-columns {
  @if $semantic == false {
    .container_#{$number-of-columns} .suffix_#{$i} {
      @include suffix($i);
    }
  }
}

/* Push Space >> #{$number-of-columns} columns
----------------------------------------------------------------------------------------------------*/

@if $semantic == false {
  @for $i from 1 to $number-of-columns {
    .container_#{$number-of-columns} .push_#{$i} {
      left: responsive($total-column-width*$i, $container-max-width); /* #{unresponsive($total-column-width*$i, $container-max-width)} */
    }
  }
}

@mixin push($left) {
  @extend %pushes_pulls;
  left: responsive($total-column-width*$left, $container-max-width); /* #{unresponsive($total-column-width*$left, $container-max-width)} */
}



/* Pull Space >> #{$number-of-columns} columns
----------------------------------------------------------------------------------------------------*/

@if $semantic == false {
  @for $i from 1 to $number-of-columns {
    .container_#{$number-of-columns} .pull_#{$i} {
      padding-left: responsive(-($total-column-width*$i), $container-max-width); /* #{unresponsive(-($total-column-width*$i), $container-max-width)} */
    }
  }
}

@mixin pull($right) {
  @extend %pushes_pulls;
  left: responsive(-($total-column-width*$right), $container-max-width); /* #{unresponsive(-($total-column-width*$right), $container-max-width)} */
}

/* `Clear Floated Elements
----------------------------------------------------------------------------------------------------*/

/* http://sonspring.com/journal/clearing-floats */

@mixin clear {
  clear: both;
  display: block;
  overflow: hidden;
  visibility: hidden;
  width: 0;
  height: 0;
}

@if $semantic == false {
  .clear {
    @include clear;
  }
}

/* http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified */

@mixin clearfix {
  &:before,
  &:after {
    content: '\0020';
    display: block;
    overflow: hidden;
    visibility: hidden;
    width: 0;
    height: 0;
  }
  &:after {
    clear: both;
  }
}


@if $semantic == false {
  .clearfix {
    @include clearfix;
  }
}

// Helpers!!!

@function absolute-column-space($columns) {
  @return $columns * $total-column-width + ($gutter / 2)
}
